object FoldAndAggregate {
        def main(args: Array[String]): Unit = {
          val spark = SparkSession.builder()
            .appName("FoldAndAggregateExample")
            .master("local[*]")
            .getOrCreate()
     
          val sc = spark.sparkContext
     
          // Example RDD
          val rdd = sc.parallelize(Seq(1, 2, 3, 4, 5))
     
          // Using fold
          val foldResult = rdd.fold(0)(_ + _ + 100)
          println(s"Result of fold: $foldResult")
     
          // Using aggregate
          val aggregateResult = rdd.aggregate(0)(
            (acc, value) => acc + value + 100, // seqOp
            (acc1, acc2) => acc1 + acc2        // combOp
          )
          println(s"Result of aggregate: $aggregateResult")
     
         // Stop Spark session
         spark.stop()
       }
      }
